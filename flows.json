[
    {
        "id": "ca7ec7c7e5bdf2fc",
        "type": "tab",
        "label": "Log In",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e8e96c2a33d8f276",
        "type": "tab",
        "label": "Sensor and Home",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "34836421c703f805",
        "type": "tab",
        "label": "Feeding schedule",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "97f9b691884ece2d",
        "type": "tab",
        "label": "Data History from ThingSpeak",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c42bcde0c0dd6265",
        "type": "tab",
        "label": "Camera",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a7f76a449c27182e",
        "type": "group",
        "z": "97f9b691884ece2d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1ba0118b03332528",
            "2936889e06b70e40",
            "5046ae94e320d7e6",
            "041ae44ad3decdc0",
            "c26552f7d4047f4c",
            "71483b76e572bd90"
        ],
        "x": 34,
        "y": 39,
        "w": 1072,
        "h": 122
    },
    {
        "id": "944477dba28d308d",
        "type": "group",
        "z": "97f9b691884ece2d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1b98f0a99b8af4aa",
            "5da4089abcc033e2",
            "22002ea66072dd4b",
            "365122e007a55d12",
            "973f3539561b46f1",
            "070479fe7f2a6f65"
        ],
        "x": 34,
        "y": 179,
        "w": 1072,
        "h": 122
    },
    {
        "id": "edbda1ef62bfb142",
        "type": "group",
        "z": "34836421c703f805",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b5daf8b89c40cce5",
            "fd791e7dbc4922e2",
            "29c2d6ccf3822d35",
            "431b1647dc34b942",
            "2e776daa04d4c503",
            "0600eb5006e28bbe",
            "2f39019fadb39940",
            "f36a78469a6a302c",
            "1bb780032de499cc",
            "2dbed5f1dce475b3",
            "31870fdd984d055a"
        ],
        "x": 14,
        "y": 759,
        "w": 1392,
        "h": 202
    },
    {
        "id": "fd109c676ba0cfa3",
        "type": "group",
        "z": "34836421c703f805",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e14e4f168fde5461",
            "04642740c43f9681",
            "aadfa0656a26eb7e",
            "f19f15dbd354c234",
            "25841a8e515c5b4a",
            "410243c9d95233eb",
            "78b93fba62ba8a3b",
            "f19a7073ea0b1fd9",
            "f9825a8bfd3d3cc5",
            "2b602d937de6a37a"
        ],
        "x": 674,
        "y": 199,
        "w": 1052,
        "h": 202
    },
    {
        "id": "92365f2d16fc32db",
        "type": "group",
        "z": "34836421c703f805",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ab468da7239a1992",
            "9380093b0695d97c",
            "230ac07b110aa449",
            "42d48329161bb8af",
            "2c569491f6305c24",
            "38366ffa9378e331",
            "7322ca28f2f4b0e0",
            "be850588720409c6",
            "15a2c3d5868b7e4b",
            "4b3acabb3f17a7af",
            "5bfc62e1e63afe88",
            "1f764c90a5409687",
            "d2b28baa46a7b22e",
            "b2ea972208ae8bd5",
            "a0ef59ccbdd4dda2",
            "ea6d874806af1436",
            "d0ac7ab67d8f0f85",
            "d9742c2819931028"
        ],
        "x": 14,
        "y": 419,
        "w": 1112,
        "h": 322
    },
    {
        "id": "abcb4d74ea2c8e8f",
        "type": "group",
        "z": "34836421c703f805",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7fef327f671fe9ca",
            "cc9b99af9a973ecd",
            "b168c7f6045c02f6",
            "9c7b3a70546c5636",
            "50f00c8642c1eab3",
            "fcf6547251b5a043",
            "661f99780b5b29e6",
            "046152ce351fbac2",
            "d093d6b8067334b1",
            "c197867ce5f2caac",
            "d35e92cb5ff8ea16",
            "711e6a25b6e3ddca",
            "ce1768a88d21a190"
        ],
        "x": 14,
        "y": 19,
        "w": 632,
        "h": 382
    },
    {
        "id": "bef42aefa75c583e",
        "type": "group",
        "z": "e8e96c2a33d8f276",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5d2d85bfcce24bf6",
            "facd3568c75ffe94",
            "3e16b9223831d42b",
            "ca7040c5336401cd",
            "77cc0d0182a5cdd3",
            "6c7e06fb2c34eab6",
            "a9865e62fb0eddc3",
            "c8060b3c441eacbc",
            "b6e55afbe70b62fa",
            "b8ffa45a88e25d08",
            "97386011274523c6",
            "6d9298ef9701a105",
            "c53e187c1f607b46",
            "076b944873857b41",
            "b657c602b006dabc",
            "648ec4b336663336",
            "ca1d0434ee8f9860"
        ],
        "x": 34,
        "y": 39,
        "w": 872,
        "h": 462
    },
    {
        "id": "d9c58ea5e631868a",
        "type": "group",
        "z": "34836421c703f805",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cd7341155dea5f98",
            "92644c3bbad6399b",
            "6c60207f260a855d",
            "17793c1e2ffa3e3b",
            "97bd3452ae05521f",
            "39d865f1812b6d49",
            "ae15145140f892d2",
            "40e6b88d48904ca6",
            "53e4e1a1db0c0e33",
            "5a5caad9f9843d42",
            "8777942fe7d231d3"
        ],
        "x": 674,
        "y": 19,
        "w": 1032,
        "h": 162
    },
    {
        "id": "ceb97c199c9ecf12",
        "type": "group",
        "z": "e8e96c2a33d8f276",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d7e70576534f6446",
            "a6816b503480cd28",
            "8a09650868d46d12",
            "88d89e4e9ec8a0e5",
            "fa21cd890a1881ca",
            "b1e9a719e7495183",
            "b84353bb23d07080"
        ],
        "x": 934,
        "y": 39,
        "w": 612,
        "h": 162
    },
    {
        "id": "1ff2c7c923cec67c",
        "type": "group",
        "z": "e8e96c2a33d8f276",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c4c17cce6edc6a47",
            "aad4816e25b7a74d",
            "2e22f594189a6b58",
            "019129d08e20dc1a",
            "d5b61288f9e00a0e",
            "dba42ecf155140fb",
            "f64b2826bf60d035",
            "31c7989a67534590",
            "829d068a470b9c62",
            "a2865fd349b00aad"
        ],
        "x": 34,
        "y": 699,
        "w": 1272,
        "h": 142
    },
    {
        "id": "30702dcfe3f71bd9",
        "type": "group",
        "z": "e8e96c2a33d8f276",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c08dd4deb1ab3b26",
            "4590f6c66bb63d2d",
            "802fab4f1761bdaa",
            "40dc35769b2ae3eb",
            "c85f88f43881c85a",
            "35c6a71a4f33cad5",
            "431741a49418f828",
            "a00ba30be38cb92d",
            "be083f11bf5de95f",
            "8c19813117ea8ede"
        ],
        "x": 34,
        "y": 859,
        "w": 1292,
        "h": 182
    },
    {
        "id": "77fa645d664b763b",
        "type": "group",
        "z": "e8e96c2a33d8f276",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fbba445e8864de6d",
            "6332add28edb2567",
            "722885279a221aed",
            "358719f9e47ec8af",
            "38e4a2487b25af8b",
            "cd9a63709c589b3e",
            "d9a3ef07e850bbb6",
            "e8c02ea5a133f6df",
            "80a9fbc0293de124",
            "2b6fc106f80f5f99"
        ],
        "x": 34,
        "y": 519,
        "w": 992,
        "h": 162
    },
    {
        "id": "6d1fc6c8fc549919",
        "type": "group",
        "z": "34836421c703f805",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "638d3418cf1ba387",
            "7a9e2dcff4230232",
            "d1f6fa75bd91b58e",
            "46bfcaf508082aa4",
            "2e11cef063589a1a",
            "dc6e5ef30f922fdb"
        ],
        "x": 1154,
        "y": 419,
        "w": 512,
        "h": 202
    },
    {
        "id": "e70951f37c0afc6b",
        "type": "group",
        "z": "ca7ec7c7e5bdf2fc",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7b55e29a649cb6ae",
            "cf4717503f55814a",
            "56c7cd7dd2a1a152",
            "c7385fde31a329db",
            "7fb00b3533c75666",
            "6d204d62efbb3ce1",
            "6605c165c410ec01"
        ],
        "x": 34,
        "y": 199,
        "w": 832,
        "h": 142
    },
    {
        "id": "f64b6a669edd1a71",
        "type": "group",
        "z": "ca7ec7c7e5bdf2fc",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "402c9a7e4e02d1ae",
            "cbf9fc7877209791",
            "0c88def3ac5a0197",
            "74171ba64313b4c7"
        ],
        "x": 34,
        "y": 59,
        "w": 632,
        "h": 122
    },
    {
        "id": "cac3fcbe18ab8e74",
        "type": "group",
        "z": "c42bcde0c0dd6265",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fde12e040e645678",
            "7487ed2198e77fce"
        ],
        "x": 34,
        "y": 39,
        "w": 432,
        "h": 122
    },
    {
        "id": "9c39670e4e7d3237",
        "type": "mqtt-broker",
        "name": "",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "3",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "febe01d4954981b4",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "22c90016b0138946",
        "type": "ui_group",
        "name": "Gauge",
        "tab": "febe01d4954981b4",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d1be80fd774cbf9c",
        "type": "ui_group",
        "name": "Chart",
        "tab": "febe01d4954981b4",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "42eef4bf01b468b0",
        "type": "ui_tab",
        "name": "Log in",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e53b421013fe6f78",
        "type": "ui_group",
        "name": "Default",
        "tab": "42eef4bf01b468b0",
        "order": 1,
        "disp": false,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "65c1d4a51c575c31",
        "type": "ui_group",
        "name": "Threshold Settings",
        "tab": "febe01d4954981b4",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "590e614324272a29",
        "type": "ui_group",
        "name": "Daily feeding schedule",
        "tab": "6889142e4e8ae192",
        "order": 2,
        "disp": true,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "cc760b424dfac2cd",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#65c030",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "AquaSmart Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "6889142e4e8ae192",
        "type": "ui_tab",
        "name": "Feeding",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "dc5dc2985129af2e",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "5730c1420f980bc5",
        "type": "ui_group",
        "name": "Sensor's Data",
        "tab": "febe01d4954981b4",
        "order": 4,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a5762ee9b40f0d48",
        "type": "ui_group",
        "name": "Live Cam",
        "tab": "c4721440d2b499c4",
        "order": 1,
        "disp": true,
        "width": "19",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2153644776610370",
        "type": "ui_group",
        "name": "Feeding History",
        "tab": "6889142e4e8ae192",
        "order": 3,
        "disp": true,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c4721440d2b499c4",
        "type": "ui_tab",
        "name": "Camera",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5e27991f69edbd3f",
        "type": "twilio-api",
        "name": "+12565408857",
        "sid": "AC95ab1cf334a87de957efee1794520ae1",
        "from": "+12565408857"
    },
    {
        "id": "7b55e29a649cb6ae",
        "type": "ui_form",
        "z": "ca7ec7c7e5bdf2fc",
        "g": "e70951f37c0afc6b",
        "name": "Log In",
        "label": "Log In",
        "group": "e53b421013fe6f78",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "Log In",
        "cancel": "Clear all",
        "topic": "",
        "topicType": "str",
        "splitLayout": "",
        "className": "",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "cf4717503f55814a"
            ]
        ]
    },
    {
        "id": "cbf9fc7877209791",
        "type": "comment",
        "z": "ca7ec7c7e5bdf2fc",
        "g": "f64b6a669edd1a71",
        "name": "Unable and hide other tabs, direct to \"Log in\" tab.",
        "info": "",
        "x": 240,
        "y": 100,
        "wires": []
    },
    {
        "id": "6605c165c410ec01",
        "type": "comment",
        "z": "ca7ec7c7e5bdf2fc",
        "g": "e70951f37c0afc6b",
        "name": "Check log in data",
        "info": "",
        "x": 140,
        "y": 240,
        "wires": []
    },
    {
        "id": "cf4717503f55814a",
        "type": "function",
        "z": "ca7ec7c7e5bdf2fc",
        "g": "e70951f37c0afc6b",
        "name": "Check log in data",
        "func": "let account = global.get(\"user\");\nif (account.username === msg.payload.username && account.password === msg.payload.password) {\n    msg.msg = true\n}\nelse {\n    msg.msg = false;\n    msg.payload = \"Invalid username or password!\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 280,
        "wires": [
            [
                "56c7cd7dd2a1a152"
            ]
        ]
    },
    {
        "id": "56c7cd7dd2a1a152",
        "type": "switch",
        "z": "ca7ec7c7e5bdf2fc",
        "g": "e70951f37c0afc6b",
        "name": "",
        "property": "msg",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 280,
        "wires": [
            [
                "c7385fde31a329db"
            ],
            [
                "7fb00b3533c75666"
            ]
        ]
    },
    {
        "id": "6d204d62efbb3ce1",
        "type": "ui_ui_control",
        "z": "ca7ec7c7e5bdf2fc",
        "g": "e70951f37c0afc6b",
        "name": "",
        "events": "all",
        "x": 780,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7fb00b3533c75666",
        "type": "ui_toast",
        "z": "ca7ec7c7e5bdf2fc",
        "g": "e70951f37c0afc6b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 610,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "c7385fde31a329db",
        "type": "change",
        "z": "ca7ec7c7e5bdf2fc",
        "g": "e70951f37c0afc6b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"tabs\":{\"show\":[\"Home\",\"Feeding\",\"Camera\"],\"enable\":[\"Home\",\"Feeding\",\"Camera\"],\"hide\":\"Log in\",\"disable\":\"Log in\"},\"tab\":\"Home\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 260,
        "wires": [
            [
                "6d204d62efbb3ce1"
            ]
        ]
    },
    {
        "id": "402c9a7e4e02d1ae",
        "type": "inject",
        "z": "ca7ec7c7e5bdf2fc",
        "g": "f64b6a669edd1a71",
        "name": "Begin with \"Log in\" tab",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.01",
        "topic": "",
        "payload": "{\"tab\":\"Log in\"}",
        "payloadType": "json",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "0c88def3ac5a0197"
            ]
        ]
    },
    {
        "id": "74171ba64313b4c7",
        "type": "ui_ui_control",
        "z": "ca7ec7c7e5bdf2fc",
        "g": "f64b6a669edd1a71",
        "name": "",
        "events": "all",
        "x": 580,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "0c88def3ac5a0197",
        "type": "change",
        "z": "ca7ec7c7e5bdf2fc",
        "g": "f64b6a669edd1a71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"tabs\":{\"hide\":[\"Home\",\"Feeding\",\"Camera\"],\"disable\":[\"Home\",\"Feeding\",\"Camera\"]},\"tab\":\"Log in\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "74171ba64313b4c7"
            ]
        ]
    },
    {
        "id": "facd3568c75ffe94",
        "type": "mqtt in",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "Receive sensor's data",
        "topic": "aqua/sensor's",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9c39670e4e7d3237",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "5d2d85bfcce24bf6"
            ]
        ]
    },
    {
        "id": "5d2d85bfcce24bf6",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "Split msg",
        "func": "var payload = msg.payload;\n\nvar parts = payload.split(\",\");\nvar temperature = parseFloat(parts[0]); \nvar pH = parseFloat(parts[1]);\n\nmsg.temperature = temperature;\nmsg.pH = pH;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "3e16b9223831d42b",
                "ca7040c5336401cd",
                "77cc0d0182a5cdd3"
            ]
        ]
    },
    {
        "id": "a9865e62fb0eddc3",
        "type": "ui_gauge",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "TempGauge",
        "group": "22c90016b0138946",
        "order": 1,
        "width": 6,
        "height": 6,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": "-55",
        "max": "125",
        "colors": [
            "#ffff00",
            "#00ff00",
            "#ca3838"
        ],
        "seg1": "25",
        "seg2": "35",
        "diff": false,
        "className": "",
        "x": 790,
        "y": 80,
        "wires": []
    },
    {
        "id": "b8ffa45a88e25d08",
        "type": "ui_chart",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "pHChart",
        "group": "d1be80fd774cbf9c",
        "order": 2,
        "width": 6,
        "height": 6,
        "label": "pH",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "14",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c8060b3c441eacbc",
        "type": "ui_chart",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "TempChart",
        "group": "d1be80fd774cbf9c",
        "order": 1,
        "width": 6,
        "height": 6,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "125",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 790,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b6e55afbe70b62fa",
        "type": "ui_gauge",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "pHGauge",
        "group": "22c90016b0138946",
        "order": 2,
        "width": 6,
        "height": 6,
        "gtype": "gage",
        "title": "pH",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "14",
        "colors": [
            "#ffff00",
            "#00ff00",
            "#ca3838"
        ],
        "seg1": "6",
        "seg2": "8",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 200,
        "wires": []
    },
    {
        "id": "6c7e06fb2c34eab6",
        "type": "debug",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "debug 1",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 780,
        "y": 160,
        "wires": []
    },
    {
        "id": "97386011274523c6",
        "type": "debug",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "debug 2",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 780,
        "y": 280,
        "wires": []
    },
    {
        "id": "3e16b9223831d42b",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "Get tmp",
        "func": "msg.payload = msg.temperature;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 120,
        "wires": [
            [
                "6c7e06fb2c34eab6",
                "a9865e62fb0eddc3",
                "c8060b3c441eacbc"
            ]
        ]
    },
    {
        "id": "ca7040c5336401cd",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "Get pH",
        "func": "msg.payload = msg.pH;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "b6e55afbe70b62fa",
                "b8ffa45a88e25d08",
                "97386011274523c6"
            ]
        ]
    },
    {
        "id": "aad4816e25b7a74d",
        "type": "ui_form",
        "z": "e8e96c2a33d8f276",
        "g": "1ff2c7c923cec67c",
        "name": "",
        "label": "Set pH limits",
        "group": "65c1d4a51c575c31",
        "order": 4,
        "width": 6,
        "height": 2,
        "options": [
            {
                "label": "Lower limit",
                "value": "lowerLimit",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Upper limit",
                "value": "upperLimit",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "lowerLimit": "",
            "upperLimit": ""
        },
        "payload": "",
        "submit": "Confirm",
        "cancel": "Cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "c4c17cce6edc6a47"
            ]
        ]
    },
    {
        "id": "c4c17cce6edc6a47",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "1ff2c7c923cec67c",
        "name": "Check input values",
        "func": "var payload = msg.payload;\n\nvar upper = parseFloat(payload.upperLimit);\nvar lower = parseFloat(payload.lowerLimit);\n\nvar up_lim = 14, lw_lim = 0;\n\nif (isNaN(upper) || isNaN(lower) || upper > up_lim || lower < lw_lim) {\n    msg.msg = \"Invalid limit values. Ensure upperLimit and lowerLimit are valid numbers.\";\n}\nelse if (lower > upper) {\n    msg.msg = \"Lower limit must not be greater than upper limit.\";\n}\nelse msg.msg = \"valid\";\n\nmsg.topic = \"aqua/sensor/pHLimit\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 800,
        "wires": [
            [
                "2e22f594189a6b58"
            ]
        ]
    },
    {
        "id": "2e22f594189a6b58",
        "type": "switch",
        "z": "e8e96c2a33d8f276",
        "g": "1ff2c7c923cec67c",
        "name": "",
        "property": "msg",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "valid",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "valid",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 800,
        "wires": [
            [
                "019129d08e20dc1a"
            ],
            [
                "d5b61288f9e00a0e"
            ]
        ]
    },
    {
        "id": "f64b2826bf60d035",
        "type": "mqtt out",
        "z": "e8e96c2a33d8f276",
        "g": "1ff2c7c923cec67c",
        "name": "aqua/sensor/pHLimit",
        "topic": "aqua/sensor/pHLimit",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c39670e4e7d3237",
        "x": 1180,
        "y": 740,
        "wires": []
    },
    {
        "id": "019129d08e20dc1a",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "1ff2c7c923cec67c",
        "name": "Reformat msg payload publish and set on flow context",
        "func": "delete msg.msg;\nflow.set(\"pH\", {\"payload\": msg.payload} );\n\n// let new_msg = { \"payload\": `${msg.payload.upperLimit},${msg.payload.lowerLimit}`};\nmsg.payload = `${msg.payload.upperLimit},${msg.payload.lowerLimit}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 740,
        "wires": [
            [
                "f64b2826bf60d035",
                "31c7989a67534590"
            ]
        ]
    },
    {
        "id": "4590f6c66bb63d2d",
        "type": "ui_form",
        "z": "e8e96c2a33d8f276",
        "g": "30702dcfe3f71bd9",
        "name": "",
        "label": "Set temp limits",
        "group": "65c1d4a51c575c31",
        "order": 2,
        "width": 6,
        "height": 2,
        "options": [
            {
                "label": "Lower limit",
                "value": "lowerLimit",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Upper limit",
                "value": "upperLimit",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "lowerLimit": "",
            "upperLimit": ""
        },
        "payload": "",
        "submit": "Confirm",
        "cancel": "Cancel",
        "topic": "aqua/sensor/tmpLimit",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 160,
        "y": 1000,
        "wires": [
            [
                "c08dd4deb1ab3b26"
            ]
        ]
    },
    {
        "id": "c08dd4deb1ab3b26",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "30702dcfe3f71bd9",
        "name": "Check input values",
        "func": "var payload = msg.payload;\n\nvar upper = parseFloat(payload.upperLimit);\nvar lower = parseFloat(payload.lowerLimit);\n\nvar up_lim = 125, lw_lim = -55;\n\n\nif (isNaN(upper) || isNaN(lower) || upper > up_lim || lower < lw_lim)\n{\n    msg.msg = \"Invalid limit values. Ensure upperLimit and lowerLimit are valid numbers.\";\n}\nelse if (lower > upper)\n{\n    msg.msg = \"Lower limit must not be greater than upper limit.\";\n}\nelse msg.msg = \"valid\";\nmsg.topic = \"aqua/sensor/tmpLimit\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1000,
        "wires": [
            [
                "802fab4f1761bdaa"
            ]
        ]
    },
    {
        "id": "802fab4f1761bdaa",
        "type": "switch",
        "z": "e8e96c2a33d8f276",
        "g": "30702dcfe3f71bd9",
        "name": "",
        "property": "msg",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "valid",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "valid",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 1000,
        "wires": [
            [
                "40dc35769b2ae3eb"
            ],
            [
                "c85f88f43881c85a"
            ]
        ]
    },
    {
        "id": "40dc35769b2ae3eb",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "30702dcfe3f71bd9",
        "name": "Reformat msg payload publish and set on flow context",
        "func": "delete msg.msg;\nflow.set(\"tmp\", { \"payload\": msg.payload });\n\n\nmsg.payload = `${msg.payload.upperLimit},${msg.payload.lowerLimit}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// default limits\nvar msg = { payload: \"25,32\" };\n\nreturn msg;",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 940,
        "wires": [
            [
                "431741a49418f828",
                "a00ba30be38cb92d"
            ]
        ]
    },
    {
        "id": "431741a49418f828",
        "type": "mqtt out",
        "z": "e8e96c2a33d8f276",
        "g": "30702dcfe3f71bd9",
        "name": "aqua/sensor/tmpLimit",
        "topic": "aqua/sensor/tmpLimit",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c39670e4e7d3237",
        "x": 1200,
        "y": 980,
        "wires": []
    },
    {
        "id": "829d068a470b9c62",
        "type": "ui_toast",
        "z": "e8e96c2a33d8f276",
        "g": "1ff2c7c923cec67c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "Setup error",
        "topic": "Invalid value input!",
        "name": "Invalid input noti",
        "x": 920,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "be083f11bf5de95f",
        "type": "ui_toast",
        "z": "e8e96c2a33d8f276",
        "g": "30702dcfe3f71bd9",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "Setup error",
        "topic": "Invalid value input!",
        "name": "Invalid input noti",
        "x": 940,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "d5b61288f9e00a0e",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "1ff2c7c923cec67c",
        "name": "Get error msg",
        "func": "var payload = msg.msg;\ndelete msg.msg;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 800,
        "wires": [
            [
                "829d068a470b9c62"
            ]
        ]
    },
    {
        "id": "c85f88f43881c85a",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "30702dcfe3f71bd9",
        "name": "Get error msg",
        "func": "var payload = msg.msg;\ndelete msg.msg;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1000,
        "wires": [
            [
                "be083f11bf5de95f"
            ]
        ]
    },
    {
        "id": "8a09650868d46d12",
        "type": "ui_text",
        "z": "e8e96c2a33d8f276",
        "g": "ceb97c199c9ecf12",
        "group": "65c1d4a51c575c31",
        "order": 1,
        "width": 6,
        "height": 2,
        "name": "",
        "label": "Current tmp limits:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1430,
        "y": 120,
        "wires": []
    },
    {
        "id": "fa21cd890a1881ca",
        "type": "ui_text",
        "z": "e8e96c2a33d8f276",
        "g": "ceb97c199c9ecf12",
        "group": "65c1d4a51c575c31",
        "order": 3,
        "width": 6,
        "height": 2,
        "name": "",
        "label": "Current pH limits:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1430,
        "y": 80,
        "wires": []
    },
    {
        "id": "77cc0d0182a5cdd3",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "Warning Sensors",
        "func": "// Thiết lập ngưỡng cảnh báo\nlet prev_warn = flow.get(\"warn\");\nlet tmp = flow.get(\"tmp\").payload, pH = flow.get(\"pH\").payload;\n\nvar tmpLimits= {\"upper\": tmp.upperLimit, \"lower\": tmp.lowerLimit};\nvar pHLimits = {\"upper\": pH.upperLimit, \"lower\": pH.lowerLimit };\nvar warn = msg.temperature > tmpLimits.upper || msg.temperature < tmpLimits.lower || \n    msg.pH > pHLimits.upper || msg.pH < pHLimits.lower;\n\nif (warn == prev_warn)\n    return null;\n\nflow.set(\"warn\", warn);\nif (warn == true)\n{\n    var subject = \"Cảnh báo từ hệ thống hồ cá thông minh!\";\n    var body = \"Cảnh báo:\\n\\n\";\n\n    // Kiểm tra điều kiện cảnh báo\n    if (msg.temperature > tmpLimits.upper ) {\n        body += \"Nhiệt độ CAO vượt ngưỡng!\\n\";\n        body += \"Ngưỡng nhiệt độ: \" + tmpLimits.lower + \"°C - \" + tmpLimits.upper + \"°C\\n\";\n        body += \"Nhiệt độ hiện tại: \" + msg.temperature + \"°C\\n\\n\";\n    }\n    else if (msg.temperature < tmpLimits.lower)\n    {\n        body += \"Nhiệt độ THẤP dưới ngưỡng!\\n\";\n        body += \"Ngưỡng nhiệt độ: \" + tmpLimits.lower + \"°C - \" + tmpLimits.upper + \"°C\\n\";\n        body += \"Nhiệt độ hiện tại: \" + msg.temperature + \"°C\\n\\n\";\n    }\n    if (msg.pH > pHLimits.upper) {\n        body += \"Độ pH CAO vượt ngưỡng!\\n\";\n        body += \"Ngưỡng pH: \" + pHLimits.lower + \" - \" + pHLimits.upper + \"\\n\";\n        body += \"Độ pH hiện tại: \" + msg.pH + \"\\n\\n\";\n    }\n    else if (msg.pH < pHLimits.lower) {\n        body += \"Độ pH THẤP dưới ngưỡng!\\n\";\n        body += \"Ngưỡng pH: \" + pHLimits.lower + \" - \" + pHLimits.upper + \"\\n\";\n        body += \"Độ pH hiện tại: \" + msg.pH + \"\\n\\n\";\n    }\n\n    let warning_msg = {\n        \"payload\" : body + \"Vui lòng kiểm tra chất lượng nước trong hồ cá!\\n\",\n        \"topic\": subject\n    };\n  \n    return warning_msg;\n}\n\nvar subject = \"Thông báo từ hệ thống hồ cá thông minh!\";\nvar body = \"Các chỉ số đã ổn định trở lại!\\n\\n\";\n\nlet new_msg = {\n    \"payload\" : body,\n    \"topic\": subject\n};\nreturn new_msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"warn\", false);\n",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "6d9298ef9701a105",
                "c53e187c1f607b46",
                "076b944873857b41",
                "b657c602b006dabc"
            ]
        ]
    },
    {
        "id": "6d9298ef9701a105",
        "type": "e-mail",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "vanphamanh2303@gmail.com",
        "dname": "Warning gmail",
        "x": 800,
        "y": 380,
        "wires": []
    },
    {
        "id": "c53e187c1f607b46",
        "type": "twilio out",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "twilio": "5e27991f69edbd3f",
        "twilioType": "sms",
        "url": "",
        "number": "+18777804236",
        "name": "",
        "x": 770,
        "y": 420,
        "wires": []
    },
    {
        "id": "a00ba30be38cb92d",
        "type": "debug",
        "z": "e8e96c2a33d8f276",
        "g": "30702dcfe3f71bd9",
        "name": "Debug 2",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1160,
        "y": 920,
        "wires": []
    },
    {
        "id": "31c7989a67534590",
        "type": "debug",
        "z": "e8e96c2a33d8f276",
        "g": "1ff2c7c923cec67c",
        "name": "Debug 1",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1140,
        "y": 800,
        "wires": []
    },
    {
        "id": "88d89e4e9ec8a0e5",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "ceb97c199c9ecf12",
        "name": "Get pH limits",
        "func": "let pH = flow.get(\"pH\").payload;\n\nlet str = `${pH.lowerLimit} - ${pH.upperLimit}`;\nlet new_msg = {\"payload\" : str};\nreturn new_msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 80,
        "wires": [
            [
                "fa21cd890a1881ca"
            ]
        ]
    },
    {
        "id": "a6816b503480cd28",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "ceb97c199c9ecf12",
        "name": "Get temp limits",
        "func": "let tmp = flow.get(\"tmp\").payload;\n\nlet str = `${tmp.lowerLimit} - ${tmp.upperLimit}`;\nlet new_msg = { \"payload\": str };\nreturn new_msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 120,
        "wires": [
            [
                "8a09650868d46d12"
            ]
        ]
    },
    {
        "id": "076b944873857b41",
        "type": "debug",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "debug 19",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 780,
        "y": 340,
        "wires": []
    },
    {
        "id": "d7e70576534f6446",
        "type": "complete",
        "z": "e8e96c2a33d8f276",
        "g": "ceb97c199c9ecf12",
        "name": "Reload temp limits ",
        "scope": [
            "a00ba30be38cb92d"
        ],
        "uncaught": false,
        "x": 1050,
        "y": 120,
        "wires": [
            [
                "a6816b503480cd28"
            ]
        ]
    },
    {
        "id": "dba42ecf155140fb",
        "type": "inject",
        "z": "e8e96c2a33d8f276",
        "g": "1ff2c7c923cec67c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "pH.payload",
        "payloadType": "flow",
        "x": 520,
        "y": 740,
        "wires": [
            [
                "019129d08e20dc1a"
            ]
        ]
    },
    {
        "id": "35c6a71a4f33cad5",
        "type": "inject",
        "z": "e8e96c2a33d8f276",
        "g": "30702dcfe3f71bd9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "tmp.payload",
        "payloadType": "flow",
        "x": 510,
        "y": 940,
        "wires": [
            [
                "40dc35769b2ae3eb"
            ]
        ]
    },
    {
        "id": "8c19813117ea8ede",
        "type": "comment",
        "z": "e8e96c2a33d8f276",
        "g": "30702dcfe3f71bd9",
        "name": "Get temperature limits and show on Dashboard",
        "info": "",
        "x": 240,
        "y": 900,
        "wires": []
    },
    {
        "id": "a2865fd349b00aad",
        "type": "comment",
        "z": "e8e96c2a33d8f276",
        "g": "1ff2c7c923cec67c",
        "name": "Get pH limits and show on Dashboard",
        "info": "",
        "x": 230,
        "y": 740,
        "wires": []
    },
    {
        "id": "b657c602b006dabc",
        "type": "ui_toast",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 790,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "648ec4b336663336",
        "type": "comment",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "Receive sensor's data from mqtt and check if it's safe ",
        "info": "",
        "x": 250,
        "y": 140,
        "wires": []
    },
    {
        "id": "ca1d0434ee8f9860",
        "type": "comment",
        "z": "e8e96c2a33d8f276",
        "g": "bef42aefa75c583e",
        "name": "Sending warning through email and sms",
        "info": "",
        "x": 510,
        "y": 460,
        "wires": []
    },
    {
        "id": "b1e9a719e7495183",
        "type": "comment",
        "z": "e8e96c2a33d8f276",
        "g": "ceb97c199c9ecf12",
        "name": "Get current sensor's limits and display",
        "info": "",
        "x": 1110,
        "y": 160,
        "wires": []
    },
    {
        "id": "38e4a2487b25af8b",
        "type": "ui_ui_control",
        "z": "e8e96c2a33d8f276",
        "g": "77fa645d664b763b",
        "name": "",
        "events": "all",
        "x": 140,
        "y": 640,
        "wires": [
            [
                "cd9a63709c589b3e"
            ]
        ]
    },
    {
        "id": "cd9a63709c589b3e",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "77fa645d664b763b",
        "name": "Check if flow is closing",
        "func": "if (msg.payload === \"lost\") {\n    msg.payload = true;\n}\nelse msg.payload = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 640,
        "wires": [
            [
                "d9a3ef07e850bbb6"
            ]
        ]
    },
    {
        "id": "d9a3ef07e850bbb6",
        "type": "switch",
        "z": "e8e96c2a33d8f276",
        "g": "77fa645d664b763b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 640,
        "wires": [
            [
                "e8c02ea5a133f6df"
            ]
        ]
    },
    {
        "id": "e8c02ea5a133f6df",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "77fa645d664b763b",
        "name": "Parse array to one string",
        "func": "let pH = flow.get(\"pH\").payload;\nlet tmp = flow.get(\"tmp\").payload;\nlet account = global.get(\"user\");\nlet feedMail = global.get(\"FeedMail\");\nlet autoFeed = global.get(\"autoFeed\");\n\nlet new_msg = {\n    \"payload\": {\n        field1: `${account.username},${account.password},${pH.lowerLimit},${pH.upperLimit},${tmp.lowerLimit},${tmp.upperLimit},${feedMail},${autoFeed}`\n    }    \n};\n\nnew_msg.url = \"https://api.thingspeak.com/update?api_key=00Q4STOTHKUHNZAB\";\nreturn new_msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 640,
        "wires": [
            [
                "80a9fbc0293de124"
            ]
        ]
    },
    {
        "id": "80a9fbc0293de124",
        "type": "http request",
        "z": "e8e96c2a33d8f276",
        "g": "77fa645d664b763b",
        "name": "Send to ThingSpeak",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/update?api_key=00Q4STOTHKUHNZAB",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 900,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "fbba445e8864de6d",
        "type": "inject",
        "z": "e8e96c2a33d8f276",
        "g": "77fa645d664b763b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.01",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "6332add28edb2567"
            ]
        ]
    },
    {
        "id": "6332add28edb2567",
        "type": "http request",
        "z": "e8e96c2a33d8f276",
        "g": "77fa645d664b763b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2630736/fields/1/last.json?api_key=QJYKH6Z3GRNPTX40",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 560,
        "wires": [
            [
                "722885279a221aed"
            ]
        ]
    },
    {
        "id": "722885279a221aed",
        "type": "json",
        "z": "e8e96c2a33d8f276",
        "g": "77fa645d664b763b",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 490,
        "y": 560,
        "wires": [
            [
                "358719f9e47ec8af"
            ]
        ]
    },
    {
        "id": "358719f9e47ec8af",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "g": "77fa645d664b763b",
        "name": "Get settings from thingspeak, set to flow",
        "func": "let payload = msg.payload.field1;\nlet data = payload.split(\",\");\n\nlet account = {\n    username: data[0],\n    password: data[1]\n};\nlet pH = {\n    lowerLimit: parseFloat(data[2]),\n    upperLimit: parseFloat(data[3])\n};\nlet tmp = {\n    lowerLimit: parseFloat(data[4]),\n    upperLimit: parseFloat(data[5])\n};\nlet checkmail = data[6];\nlet checkauto = data[7];\n\nlet feedMail, autoFeed;\n\nif (checkmail === \"true\") {\n    feedMail = true;\n}\nelse {\n    feedMail = false;\n}\n\nif (checkauto === \"true\") {\n    autoFeed = true;\n}\nelse {\n    autoFeed = false;\n}\n\nflow.set(\"pH\", { \"payload\": pH });\nflow.set(\"tmp\", { \"payload\": tmp });\nglobal.set(\"user\", account);\nglobal.set(\"FeedMail\", feedMail);\nglobal.set(\"autoFeed\", autoFeed);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "2b6fc106f80f5f99",
        "type": "comment",
        "z": "e8e96c2a33d8f276",
        "g": "77fa645d664b763b",
        "name": "Update and get setting and account's data from thingspeak",
        "info": "",
        "x": 290,
        "y": 600,
        "wires": []
    },
    {
        "id": "b84353bb23d07080",
        "type": "complete",
        "z": "e8e96c2a33d8f276",
        "g": "ceb97c199c9ecf12",
        "name": "Reload pH limits",
        "scope": [
            "31c7989a67534590"
        ],
        "uncaught": false,
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "88d89e4e9ec8a0e5"
            ]
        ]
    },
    {
        "id": "7fef327f671fe9ca",
        "type": "ui_switch",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "name": "",
        "label": "Auto",
        "tooltip": "Automatically feeding base on schedule",
        "group": "590e614324272a29",
        "order": 3,
        "width": 9,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "On",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "Off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "cc9b99af9a973ecd"
            ]
        ]
    },
    {
        "id": "a0ef59ccbdd4dda2",
        "type": "ui_button",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Delete button",
        "group": "590e614324272a29",
        "order": 9,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Delete time",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "str",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "5bfc62e1e63afe88"
            ]
        ]
    },
    {
        "id": "ab468da7239a1992",
        "type": "ui_text_input",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Add new time",
        "label": "Add new row",
        "tooltip": "",
        "group": "590e614324272a29",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "time",
        "delay": "0",
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "d9742c2819931028"
            ]
        ]
    },
    {
        "id": "2c569491f6305c24",
        "type": "function",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Process Add",
        "func": "let newTime = msg.payload; \nif (newTime === \"NaN:NaN\") {\n    msg.payload = \"Invalid / Null time input!\";\n    return msg;\n}\n\nlet data = flow.get(\"table\").payload || [];\nlet exists = data.some(item => typeof item.time === 'string' && item.time === newTime);\n\nif (!exists) {\n    data.push({\n        time: newTime,\n        id: 0\n    });\n    msg.payload = \"Add success!\";\n} else {\n    msg.payload = \"Time exists!\";\n}\n\nlet updated_table = {\"payload\": data}\nflow.set(\"table\", updated_table);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 520,
        "wires": [
            [
                "38366ffa9378e331"
            ]
        ]
    },
    {
        "id": "5bfc62e1e63afe88",
        "type": "function",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Process Remove",
        "func": "let indexToRemove = parseInt(flow.get(\"index\"));\nlet table = flow.get(\"table\").payload;\n\nvar msg = {};\nif (indexToRemove >= 1 && indexToRemove <= table.length) {\n    table = table.filter(item => item.id !== indexToRemove);\n    \n    msg.payload = \"Delete success!\";\n}\nelse {\n    msg.payload = \"Index out of bounds!\"\n}\nlet updated_table = {\"payload\" : table};\nflow.set(\"table\", updated_table);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            [
                "4b3acabb3f17a7af"
            ]
        ]
    },
    {
        "id": "ea6d874806af1436",
        "type": "ui_text_input",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Index of time to delete",
        "label": "Index of row to delete",
        "tooltip": "",
        "group": "590e614324272a29",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "d0ac7ab67d8f0f85"
            ]
        ]
    },
    {
        "id": "638d3418cf1ba387",
        "type": "function",
        "z": "34836421c703f805",
        "g": "6d1fc6c8fc549919",
        "name": "sort",
        "func": "let data = flow.get(\"table\").payload;\n\ndata.sort((a, b) => {\n    let timeA = a.time.split(':').map(Number);\n    let timeB = b.time.split(':').map(Number);\n    return timeA[0] * 60 + timeA[1] - (timeB[0] * 60 + timeB[1]);\n});\n\ndata = data.map((item, index) => ({ ...item, id: index + 1 }));\n\nlet table = {\"payload\": data}\nflow.set(\"table\", table);\n\nreturn table;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 520,
        "wires": [
            [
                "2e11cef063589a1a"
            ]
        ]
    },
    {
        "id": "2e11cef063589a1a",
        "type": "ui_table",
        "z": "34836421c703f805",
        "g": "6d1fc6c8fc549919",
        "group": "590e614324272a29",
        "name": "",
        "order": 2,
        "width": 9,
        "height": 5,
        "columns": [
            {
                "field": "id",
                "title": "Index",
                "width": "100",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time",
                "title": "Time",
                "width": "375",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1590,
        "y": 520,
        "wires": []
    },
    {
        "id": "42d48329161bb8af",
        "type": "function",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Format from timestampt to time (HH:MM) string",
        "func": "let timestamp = parseInt(flow.get(\"time\"), 10);\nlet hours = Math.floor(timestamp / (1000 * 60 * 60));\nlet minutes = Math.floor((timestamp % (1000 * 60 * 60)) / (1000 * 60));\nlet formattedTime = (hours < 10 ? '0' : '') + hours + ':' + (minutes < 10 ? '0' : '') + minutes;\n\nmsg.payload = formattedTime; \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 520,
        "wires": [
            [
                "2c569491f6305c24"
            ]
        ]
    },
    {
        "id": "38366ffa9378e331",
        "type": "switch",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Add success!",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Add success!",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 520,
        "wires": [
            [
                "7322ca28f2f4b0e0",
                "be850588720409c6"
            ],
            [
                "15a2c3d5868b7e4b"
            ]
        ]
    },
    {
        "id": "15a2c3d5868b7e4b",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Adding feeding time fail!",
        "name": "Adding feeding time fail!",
        "x": 990,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "7322ca28f2f4b0e0",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Feeding Time Added!",
        "name": "Feeding Time Added!",
        "x": 980,
        "y": 500,
        "wires": []
    },
    {
        "id": "230ac07b110aa449",
        "type": "ui_button",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Add button",
        "group": "590e614324272a29",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Add time",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "sent",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "str",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "42d48329161bb8af"
            ]
        ]
    },
    {
        "id": "d9742c2819931028",
        "type": "function",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Get \"add time\" field",
        "func": "flow.set(\"time\", msg.payload);\nreturn ;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "cc9b99af9a973ecd",
        "type": "switch",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "On",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "On",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "b168c7f6045c02f6",
                "9c7b3a70546c5636"
            ],
            [
                "50f00c8642c1eab3",
                "fcf6547251b5a043"
            ]
        ]
    },
    {
        "id": "b168c7f6045c02f6",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Automatic feeding mode:",
        "name": "",
        "x": 530,
        "y": 60,
        "wires": []
    },
    {
        "id": "50f00c8642c1eab3",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Automatic feeding mode:",
        "name": "",
        "x": 530,
        "y": 180,
        "wires": []
    },
    {
        "id": "d0ac7ab67d8f0f85",
        "type": "function",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Get \"delete index\" field",
        "func": "flow.set(\"index\", msg.payload);\nreturn ;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "4b3acabb3f17a7af",
        "type": "switch",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Delete success!",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Delete success!",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 640,
        "wires": [
            [
                "1f764c90a5409687",
                "d2b28baa46a7b22e"
            ],
            [
                "b2ea972208ae8bd5"
            ]
        ]
    },
    {
        "id": "1f764c90a5409687",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Feeding Time Deleted!",
        "name": "Feeding Time Deleted!",
        "x": 700,
        "y": 640,
        "wires": []
    },
    {
        "id": "b2ea972208ae8bd5",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Deleting feeding time fail!",
        "name": "Deleting feeding time fail!",
        "x": 710,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "9c7b3a70546c5636",
        "type": "function",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "name": "Set auto feed: true",
        "func": "global.set(\"autoFeed\", true);\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "fcf6547251b5a043",
        "type": "function",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "name": "Set auto feed: false",
        "func": "global.set(\"autoFeed\", false);\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "661f99780b5b29e6",
        "type": "ui_switch",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "name": "",
        "label": "Email notification",
        "tooltip": "Feeding notification through email on schedule",
        "group": "590e614324272a29",
        "order": 4,
        "width": 9,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "On",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "Off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "046152ce351fbac2"
            ]
        ]
    },
    {
        "id": "be850588720409c6",
        "type": "debug",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Debug node 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 460,
        "wires": []
    },
    {
        "id": "d2b28baa46a7b22e",
        "type": "debug",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Debug node 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 600,
        "wires": []
    },
    {
        "id": "e14e4f168fde5461",
        "type": "ui_button",
        "z": "34836421c703f805",
        "g": "fd109c676ba0cfa3",
        "name": "",
        "group": "590e614324272a29",
        "order": 1,
        "width": 9,
        "height": 1,
        "passthru": false,
        "label": "Feed now",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 760,
        "y": 300,
        "wires": [
            [
                "04642740c43f9681"
            ]
        ]
    },
    {
        "id": "78b93fba62ba8a3b",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "g": "fd109c676ba0cfa3",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Feed command Sent!",
        "name": "Feed success!",
        "x": 1620,
        "y": 300,
        "wires": []
    },
    {
        "id": "04642740c43f9681",
        "type": "function",
        "z": "34836421c703f805",
        "g": "fd109c676ba0cfa3",
        "name": "Get dropdown inform for amount of food",
        "func": "let new_msg = {\"payload\": flow.get(\"feed\")};\nif (new_msg.payload == undefined) new_msg.payload = \"Select amount of food first!\";\nreturn new_msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 300,
        "wires": [
            [
                "aadfa0656a26eb7e"
            ]
        ]
    },
    {
        "id": "f19a7073ea0b1fd9",
        "type": "ui_dropdown",
        "z": "34836421c703f805",
        "g": "fd109c676ba0cfa3",
        "name": "",
        "label": "Amount of food",
        "tooltip": "",
        "place": "Select option",
        "group": "590e614324272a29",
        "order": 5,
        "width": 9,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Minimum",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Medium",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Maximum",
                "value": 3,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "2b602d937de6a37a"
            ]
        ]
    },
    {
        "id": "f19f15dbd354c234",
        "type": "mqtt out",
        "z": "34836421c703f805",
        "g": "fd109c676ba0cfa3",
        "name": "aqua/Servo",
        "topic": "aqua/Servo",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c39670e4e7d3237",
        "x": 1430,
        "y": 240,
        "wires": []
    },
    {
        "id": "046152ce351fbac2",
        "type": "switch",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "On",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "On",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 300,
        "wires": [
            [
                "d093d6b8067334b1",
                "c197867ce5f2caac"
            ],
            [
                "d35e92cb5ff8ea16",
                "711e6a25b6e3ddca"
            ]
        ]
    },
    {
        "id": "c197867ce5f2caac",
        "type": "function",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "name": "Set feed mail: true",
        "func": "global.set(\"FeedMail\", true);\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "d093d6b8067334b1",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Email notification to feed mode: ",
        "name": "",
        "x": 530,
        "y": 240,
        "wires": []
    },
    {
        "id": "711e6a25b6e3ddca",
        "type": "function",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "name": "Set feed mail: false",
        "func": "global.set(\"FeedMail\", false);\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "d35e92cb5ff8ea16",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "position": "top right",
        "displayTime": "4",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Email notification to feed mode: ",
        "name": "",
        "x": 530,
        "y": 360,
        "wires": []
    },
    {
        "id": "9380093b0695d97c",
        "type": "comment",
        "z": "34836421c703f805",
        "g": "92365f2d16fc32db",
        "name": "Check input data on adding and removing function for feeding schedule",
        "info": "",
        "x": 290,
        "y": 700,
        "wires": []
    },
    {
        "id": "fd791e7dbc4922e2",
        "type": "function",
        "z": "34836421c703f805",
        "g": "edbda1ef62bfb142",
        "name": "Check schedule",
        "func": "var schedules = msg.payload; \n\nif (!schedules || !Array.isArray(schedules) || schedules.length === 0) {\n    msg.payload = {\n        error: \"No valid schedule data found in flow context.\"\n    };\n    return msg;\n}\n\nvar now = new Date();\nvar currentTime = now.getHours().toString().padStart(2, '0') + \":\" + now.getMinutes().toString().padStart(2, '0');\n\nvar matchFound = false;\nfor (var i = 0; i < schedules.length; i++) {\n    var scheduleTime = schedules[i].time;\n    if (scheduleTime === currentTime) {\n        matchFound = true;\n        break;\n    }\n}\n\nmsg.payload = matchFound;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 860,
        "wires": [
            [
                "29c2d6ccf3822d35"
            ]
        ]
    },
    {
        "id": "b5daf8b89c40cce5",
        "type": "inject",
        "z": "34836421c703f805",
        "g": "edbda1ef62bfb142",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "table.payload",
        "payloadType": "flow",
        "x": 150,
        "y": 860,
        "wires": [
            [
                "fd791e7dbc4922e2"
            ]
        ]
    },
    {
        "id": "29c2d6ccf3822d35",
        "type": "switch",
        "z": "34836421c703f805",
        "g": "edbda1ef62bfb142",
        "name": "Time matched!",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 520,
        "y": 860,
        "wires": [
            [
                "431b1647dc34b942"
            ]
        ]
    },
    {
        "id": "431b1647dc34b942",
        "type": "function",
        "z": "34836421c703f805",
        "g": "edbda1ef62bfb142",
        "name": "Feed on Schedule proccess",
        "func": "var auto = global.get(\"autoFeed\");\nvar mail = global.get(\"FeedMail\");\n\nif (auto && mail){\n    msg.payload = 1;    \n}\nelse if (auto && !mail){\n    msg.payload = 2;    \n}\nelse if (!auto && mail) {\n    msg.payload = 3;\n}\nelse {\n    msg.payload = 4;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 860,
        "wires": [
            [
                "2e776daa04d4c503"
            ]
        ]
    },
    {
        "id": "1bb780032de499cc",
        "type": "mqtt out",
        "z": "34836421c703f805",
        "g": "edbda1ef62bfb142",
        "name": "aqua/Servo",
        "topic": "aqua/Servo",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c39670e4e7d3237",
        "x": 1310,
        "y": 800,
        "wires": []
    },
    {
        "id": "2e776daa04d4c503",
        "type": "switch",
        "z": "34836421c703f805",
        "g": "edbda1ef62bfb142",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 930,
        "y": 860,
        "wires": [
            [
                "0600eb5006e28bbe",
                "f36a78469a6a302c"
            ],
            [
                "0600eb5006e28bbe"
            ],
            [
                "2f39019fadb39940"
            ]
        ]
    },
    {
        "id": "0600eb5006e28bbe",
        "type": "function",
        "z": "34836421c703f805",
        "g": "edbda1ef62bfb142",
        "name": "Feed command send",
        "func": "let new_msg = {\"payload\": flow.get(\"feed\")};\nreturn new_msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 800,
        "wires": [
            [
                "1bb780032de499cc"
            ]
        ]
    },
    {
        "id": "2f39019fadb39940",
        "type": "function",
        "z": "34836421c703f805",
        "g": "edbda1ef62bfb142",
        "name": "Send remind mail",
        "func": "var subject = \"Nhắc nhở từ hệ thống hồ cá thông minh!\";\nvar body = \"Đã đến giờ cho cá ăn!\\n\\n\" +\n           \"Vui lòng kiểm tra lượng thức ăn và đảm bảo rằng cá được cho ăn đúng giờ.\\n\\n\" +\n           \"Cảm ơn bạn đã sử dụng hệ thống hồ cá thông minh!\";\n\nlet reminder_msg = {\n    \"payload\" : body,\n    \"topic\": subject\n};\n\nreturn reminder_msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 920,
        "wires": [
            [
                "2dbed5f1dce475b3"
            ]
        ]
    },
    {
        "id": "f36a78469a6a302c",
        "type": "function",
        "z": "34836421c703f805",
        "g": "edbda1ef62bfb142",
        "name": "Send notification for auto feed mail",
        "func": "var autoFeedSubject = \"Thông báo từ hệ thống hồ cá thông minh!\";\nvar autoFeedBody = \"Hệ thống đã tự động cho cá ăn theo lịch thành công!\\n\\n\" +\n           \"Vui lòng kiểm tra lượng thức ăn trong hệ thống và đảm bảo rằng hệ thống vẫn hoạt động bình thường.\\n\\n\" +\n           \"Cảm ơn bạn đã sử dụng hệ thống hồ cá thông minh!\";\n\nlet autoFeed_msg = {\n    \"payload\" : autoFeedBody,\n    \"topic\": autoFeedSubject\n};\n\nreturn autoFeed_msg; \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 860,
        "wires": [
            [
                "2dbed5f1dce475b3"
            ]
        ]
    },
    {
        "id": "2dbed5f1dce475b3",
        "type": "e-mail",
        "z": "34836421c703f805",
        "g": "edbda1ef62bfb142",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "vanphamanh2303@gmail.com",
        "dname": "Mail",
        "x": 1310,
        "y": 920,
        "wires": []
    },
    {
        "id": "25841a8e515c5b4a",
        "type": "change",
        "z": "34836421c703f805",
        "g": "fd109c676ba0cfa3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Feeding!",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 300,
        "wires": [
            [
                "78b93fba62ba8a3b"
            ]
        ]
    },
    {
        "id": "aadfa0656a26eb7e",
        "type": "switch",
        "z": "34836421c703f805",
        "g": "fd109c676ba0cfa3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 300,
        "wires": [
            [
                "f19f15dbd354c234",
                "25841a8e515c5b4a"
            ],
            [
                "410243c9d95233eb"
            ]
        ]
    },
    {
        "id": "410243c9d95233eb",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "g": "fd109c676ba0cfa3",
        "position": "dialog",
        "displayTime": "4",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Feed command Error!",
        "name": "",
        "x": 1430,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "31870fdd984d055a",
        "type": "comment",
        "z": "34836421c703f805",
        "g": "edbda1ef62bfb142",
        "name": "Check schedule every minute and proccess auto/notimail function on time!",
        "info": "",
        "x": 320,
        "y": 820,
        "wires": []
    },
    {
        "id": "f9825a8bfd3d3cc5",
        "type": "comment",
        "z": "34836421c703f805",
        "g": "fd109c676ba0cfa3",
        "name": "Feed now button setting",
        "info": "",
        "x": 800,
        "y": 360,
        "wires": []
    },
    {
        "id": "ce1768a88d21a190",
        "type": "comment",
        "z": "34836421c703f805",
        "g": "abcb4d74ea2c8e8f",
        "name": "Button setting and save on global context",
        "info": "",
        "x": 200,
        "y": 240,
        "wires": []
    },
    {
        "id": "5a5caad9f9843d42",
        "type": "http request",
        "z": "34836421c703f805",
        "g": "d9c58ea5e631868a",
        "name": "Send to ThingSpeak",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/update?api_key=AR02L8NW4XWPDUHR",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1540,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "92644c3bbad6399b",
        "type": "inject",
        "z": "34836421c703f805",
        "g": "d9c58ea5e631868a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 140,
        "wires": [
            [
                "6c60207f260a855d"
            ]
        ]
    },
    {
        "id": "6c60207f260a855d",
        "type": "http request",
        "z": "34836421c703f805",
        "g": "d9c58ea5e631868a",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2628748/fields/1/last.json?api_key=5F3CGS1EWC7MW3BG",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 140,
        "wires": [
            [
                "17793c1e2ffa3e3b"
            ]
        ]
    },
    {
        "id": "97bd3452ae05521f",
        "type": "function",
        "z": "34836421c703f805",
        "g": "d9c58ea5e631868a",
        "name": "Get data from thingspeak and set to flow",
        "func": "let parsedData = JSON.parse(msg.payload);\nlet timeArray = [];\n\n// Kiểm tra nếu 'field1' tồn tại và là một chuỗi\nif (typeof parsedData.field1 === 'string') {\n    let tempArray = parsedData.field1.split(',');  // Chuyển đổi 'field1' thành mảng tạm thời\n\n    for (let time of tempArray) {\n        timeArray.push({\n            \"time\": time\n        }); \n    }\n}\nlet new_msg = { \"payload\": timeArray };  // Trả về mảng các chuỗi thời gian\nflow.set(\"table\", new_msg);\nreturn new_msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 140,
        "wires": [
            [
                "39d865f1812b6d49"
            ]
        ]
    },
    {
        "id": "17793c1e2ffa3e3b",
        "type": "json",
        "z": "34836421c703f805",
        "g": "d9c58ea5e631868a",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1090,
        "y": 140,
        "wires": [
            [
                "97bd3452ae05521f"
            ]
        ]
    },
    {
        "id": "39d865f1812b6d49",
        "type": "debug",
        "z": "34836421c703f805",
        "g": "d9c58ea5e631868a",
        "name": "Debug node 3",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1580,
        "y": 140,
        "wires": []
    },
    {
        "id": "7a9e2dcff4230232",
        "type": "complete",
        "z": "34836421c703f805",
        "g": "6d1fc6c8fc549919",
        "name": "Reload after updating",
        "scope": [
            "39d865f1812b6d49"
        ],
        "uncaught": false,
        "x": 1280,
        "y": 580,
        "wires": [
            [
                "638d3418cf1ba387"
            ]
        ]
    },
    {
        "id": "d1f6fa75bd91b58e",
        "type": "complete",
        "z": "34836421c703f805",
        "g": "6d1fc6c8fc549919",
        "name": "Reload after adding",
        "scope": [
            "d2b28baa46a7b22e"
        ],
        "uncaught": false,
        "x": 1270,
        "y": 520,
        "wires": [
            [
                "638d3418cf1ba387"
            ]
        ]
    },
    {
        "id": "46bfcaf508082aa4",
        "type": "complete",
        "z": "34836421c703f805",
        "g": "6d1fc6c8fc549919",
        "name": "Reload after adding",
        "scope": [
            "be850588720409c6"
        ],
        "uncaught": false,
        "x": 1270,
        "y": 460,
        "wires": [
            [
                "638d3418cf1ba387"
            ]
        ]
    },
    {
        "id": "cd7341155dea5f98",
        "type": "ui_ui_control",
        "z": "34836421c703f805",
        "g": "d9c58ea5e631868a",
        "name": "",
        "events": "all",
        "x": 780,
        "y": 60,
        "wires": [
            [
                "ae15145140f892d2"
            ]
        ]
    },
    {
        "id": "40e6b88d48904ca6",
        "type": "switch",
        "z": "34836421c703f805",
        "g": "d9c58ea5e631868a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1130,
        "y": 60,
        "wires": [
            [
                "53e4e1a1db0c0e33"
            ]
        ]
    },
    {
        "id": "ae15145140f892d2",
        "type": "function",
        "z": "34836421c703f805",
        "g": "d9c58ea5e631868a",
        "name": "Check if flow is closing",
        "func": "if (msg.payload === \"lost\") {\n    msg.payload = true;\n}\nelse msg.payload = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 60,
        "wires": [
            [
                "40e6b88d48904ca6"
            ]
        ]
    },
    {
        "id": "53e4e1a1db0c0e33",
        "type": "function",
        "z": "34836421c703f805",
        "g": "d9c58ea5e631868a",
        "name": "Parse array to one string",
        "func": "let data = flow.get(\"table\").payload;\nlet dataStringArray = data.map(item => item.time)\nlet dataString = dataStringArray.join(',');\n\nlet new_msg = {\n    \"payload\": {\n        field1 : dataString\n    }    \n};\nnew_msg.url = \"https://api.thingspeak.com/update?api_key=AR02L8NW4XWPDUHR\";\nreturn new_msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 60,
        "wires": [
            [
                "5a5caad9f9843d42"
            ]
        ]
    },
    {
        "id": "8777942fe7d231d3",
        "type": "comment",
        "z": "34836421c703f805",
        "g": "d9c58ea5e631868a",
        "name": "Get and update feeding schedule to thingspeak",
        "info": "Get feeding schedule from thingspeak and set to flow \"table\"\nwhenever flow start!\n\nAnd get flow \"table\" then update to thingspeak whenever tab close or web close!",
        "x": 900,
        "y": 100,
        "wires": []
    },
    {
        "id": "2b602d937de6a37a",
        "type": "change",
        "z": "34836421c703f805",
        "g": "fd109c676ba0cfa3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "feed",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "dc6e5ef30f922fdb",
        "type": "comment",
        "z": "34836421c703f805",
        "g": "6d1fc6c8fc549919",
        "name": "Reload table ",
        "info": "",
        "x": 1470,
        "y": 460,
        "wires": []
    },
    {
        "id": "2936889e06b70e40",
        "type": "http request",
        "z": "97f9b691884ece2d",
        "g": "a7f76a449c27182e",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://thingspeak.com/channels/2624543/feeds.csv?api_keys=YA3LFQ0FBOO1RHIW",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 120,
        "wires": [
            [
                "5046ae94e320d7e6"
            ]
        ]
    },
    {
        "id": "1ba0118b03332528",
        "type": "inject",
        "z": "97f9b691884ece2d",
        "g": "a7f76a449c27182e",
        "name": "Inject and update every 10 minutes",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 120,
        "wires": [
            [
                "2936889e06b70e40"
            ]
        ]
    },
    {
        "id": "5046ae94e320d7e6",
        "type": "json",
        "z": "97f9b691884ece2d",
        "g": "a7f76a449c27182e",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 650,
        "y": 120,
        "wires": [
            [
                "041ae44ad3decdc0"
            ]
        ]
    },
    {
        "id": "041ae44ad3decdc0",
        "type": "function",
        "z": "97f9b691884ece2d",
        "g": "a7f76a449c27182e",
        "name": "Parse string to array",
        "func": "function parseAndSortData(input) {\n    const result = [];\n    const lines = input.trim().split('\\n');\n\n    lines.forEach(line => {\n        if (!line) return;\n\n        const parts = line.split(',');\n        if (parts.length < 4) return; \n\n        const dateTime = parts[0].split(' ');\n        if (dateTime.length < 2) return;\n\n        let date = dateTime[0];\n        let time = dateTime[1];\n        const temp = parseFloat(parts[2]);\n        const pH = parseFloat(parts[3]);\n\n        let [year, month, day] = date.split('-').map(Number);\n        let [hours, minutes, seconds] = time.split(':').map(Number);\n        let currentDate = new Date(year, month - 1, day, hours, minutes, seconds);\n\n        let initialDate = currentDate.getDate();\n\n        currentDate.setHours(currentDate.getHours() + 7);\n\n        if (currentDate.getDate() !== initialDate) {\n            year = currentDate.getFullYear();\n            month = currentDate.getMonth() + 1; \n            day = currentDate.getDate();\n        }\n\n        let adjustedDate = `${year.toString().padStart(4, '0')}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n        let adjustedTime = currentDate.toTimeString().split(' ')[0];\n\n        result.push({date: adjustedDate, time: adjustedTime, temp, pH });\n    });\n\n    result.sort((a, b) => {\n        const dateA = new Date(`${a.date}T${a.time}`).getTime();\n        const dateB = new Date(`${b.date}T${b.time}`).getTime();\n        return dateB - dateA;\n    });\n    return result;\n}\n\nmsg.payload = parseAndSortData(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 120,
        "wires": [
            [
                "71483b76e572bd90"
            ]
        ]
    },
    {
        "id": "5da4089abcc033e2",
        "type": "inject",
        "z": "97f9b691884ece2d",
        "g": "944477dba28d308d",
        "name": "Inject and update every 10 secs",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 260,
        "wires": [
            [
                "1b98f0a99b8af4aa"
            ]
        ]
    },
    {
        "id": "1b98f0a99b8af4aa",
        "type": "http request",
        "z": "97f9b691884ece2d",
        "g": "944477dba28d308d",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://thingspeak.com/channels/2627892/feeds.csv?api_keys=O05LWU16ULI2EIED ",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 260,
        "wires": [
            [
                "22002ea66072dd4b"
            ]
        ]
    },
    {
        "id": "22002ea66072dd4b",
        "type": "json",
        "z": "97f9b691884ece2d",
        "g": "944477dba28d308d",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 650,
        "y": 260,
        "wires": [
            [
                "365122e007a55d12"
            ]
        ]
    },
    {
        "id": "365122e007a55d12",
        "type": "function",
        "z": "97f9b691884ece2d",
        "g": "944477dba28d308d",
        "name": "Parse string to array",
        "func": "function parseAndSortAmountData(input) {\n    const result = [];\n    const lines = input.trim().split('\\n');  \n\n    lines.forEach(line => {\n        if (!line) return;\n\n        const parts = line.split(',');\n        if (parts.length < 2) return;\n\n        const dateTime = parts[0].split(' ');\n\n        if (dateTime.length < 2) return;\n\n        const amount = parseFloat(parts[2]);\n\n        let str_amount;\n        if (amount == 1) { str_amount = \"Minimum\"; }\n        else if (amount == 2) { str_amount = \"Medium\"; }\n        else { str_amount = \"Maximum\"; }\n\n        let date = dateTime[0];\n        let time = dateTime[1];\n        let [year, month, day] = date.split('-').map(Number);\n        let [hours, minutes, seconds] = time.split(':').map(Number);\n        let currentDate = new Date(year, month - 1, day, hours, minutes, seconds);\n\n        if (isNaN(currentDate)) return;\n\n        const initialDay = currentDate.getDate();\n        currentDate.setHours(currentDate.getHours() + 7);\n\n        if (currentDate.getDate() !== initialDay) {\n            year = currentDate.getFullYear();\n            month = currentDate.getMonth() + 1;\n            day = currentDate.getDate();\n        }\n\n        let adjustedDate = `${year.toString().padStart(4, '0')}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n        let adjustedTime = currentDate.toTimeString().split(' ')[0];\n\n        result.push({ date: adjustedDate, time: adjustedTime, str_amount });\n    });\n\n    result.sort((a, b) => {\n        const dateA = new Date(`${a.date}T${a.time}`).getTime();\n        const dateB = new Date(`${b.date}T${b.time}`).getTime();\n        return dateB - dateA; // Sắp xếp theo thứ tự giảm dần\n    });\n    return result;\n}\n\nmsg.payload = parseAndSortAmountData(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 260,
        "wires": [
            [
                "973f3539561b46f1"
            ]
        ]
    },
    {
        "id": "973f3539561b46f1",
        "type": "ui_table",
        "z": "97f9b691884ece2d",
        "g": "944477dba28d308d",
        "group": "2153644776610370",
        "name": "",
        "order": 1,
        "width": 9,
        "height": 11,
        "columns": [
            {
                "field": "date",
                "title": "Date",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time",
                "title": "Time",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "str_amount",
                "title": "Amount of food",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1030,
        "y": 260,
        "wires": []
    },
    {
        "id": "c26552f7d4047f4c",
        "type": "comment",
        "z": "97f9b691884ece2d",
        "g": "a7f76a449c27182e",
        "name": "Sensor's Data from thingspeak",
        "info": "",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "070479fe7f2a6f65",
        "type": "comment",
        "z": "97f9b691884ece2d",
        "g": "944477dba28d308d",
        "name": "Feeding History from thingspeak",
        "info": "",
        "x": 210,
        "y": 220,
        "wires": []
    },
    {
        "id": "71483b76e572bd90",
        "type": "ui_table",
        "z": "97f9b691884ece2d",
        "g": "a7f76a449c27182e",
        "group": "5730c1420f980bc5",
        "name": "",
        "order": 1,
        "width": 7,
        "height": 12,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1030,
        "y": 120,
        "wires": []
    },
    {
        "id": "fde12e040e645678",
        "type": "ui_template",
        "z": "c42bcde0c0dd6265",
        "g": "cac3fcbe18ab8e74",
        "group": "a5762ee9b40f0d48",
        "name": "Stream Cam",
        "order": 1,
        "width": 19,
        "height": 13,
        "format": "<style>\n  .video-container {\n      width: 900px;\n      height: 900px;\n      margin: 0 auto;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n      border-radius: 10px;\n      overflow: hidden;\n      background-color: #000; \n      border: 5px solid red; \n  }\n\n  .video-container iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n  }\n\n  .video-title {\n      text-align: center;\n      color: #333;\n      font-size: 18px;\n      margin-bottom: 10px;\n  }\n\n  .caption {\n      text-align: center;\n      color: red; \n      font-size: 14px;\n      margin-top: 10px;\n  }\n</style>\n\n<div class=\"video-container\">\n  <div class=\"video-title\">Video Demo</div>\n  <iframe src=\"https://www.youtube.com/embed/DHUnz4dyb54\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n<div class=\"caption\">Live ESP32 Camera</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 130,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7487ed2198e77fce",
        "type": "comment",
        "z": "c42bcde0c0dd6265",
        "g": "cac3fcbe18ab8e74",
        "name": "Demo camera display using 24/7 stream embed URL",
        "info": "",
        "x": 250,
        "y": 120,
        "wires": []
    }
]