[
    {
        "id": "ca7ec7c7e5bdf2fc",
        "type": "tab",
        "label": "Log In",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e8e96c2a33d8f276",
        "type": "tab",
        "label": "Data flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "34836421c703f805",
        "type": "tab",
        "label": "Feeding schedule",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2c95d874b6e3eb36",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9c39670e4e7d3237",
        "type": "mqtt-broker",
        "name": "",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "febe01d4954981b4",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "22c90016b0138946",
        "type": "ui_group",
        "name": "Gauge",
        "tab": "febe01d4954981b4",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d1be80fd774cbf9c",
        "type": "ui_group",
        "name": "Chart",
        "tab": "febe01d4954981b4",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "42eef4bf01b468b0",
        "type": "ui_tab",
        "name": "Log in",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e53b421013fe6f78",
        "type": "ui_group",
        "name": "Default",
        "tab": "42eef4bf01b468b0",
        "order": 1,
        "disp": false,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "65c1d4a51c575c31",
        "type": "ui_group",
        "name": "Config",
        "tab": "febe01d4954981b4",
        "order": 3,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "590e614324272a29",
        "type": "ui_group",
        "name": "Feeding schedule",
        "tab": "6889142e4e8ae192",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cc760b424dfac2cd",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#65c030",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "AquaSmart Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "icon",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "6889142e4e8ae192",
        "type": "ui_tab",
        "name": "Schedule",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ff9fdb9a.7da098",
        "type": "ui_group",
        "name": "TEST",
        "tab": "7dcc246f.ee661c",
        "order": 1,
        "disp": false,
        "width": "8",
        "collapse": false
    },
    {
        "id": "7dcc246f.ee661c",
        "type": "ui_tab",
        "name": "TEST",
        "icon": "dashboard",
        "order": 12,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "7b55e29a649cb6ae",
        "type": "ui_form",
        "z": "ca7ec7c7e5bdf2fc",
        "name": "Log In",
        "label": "Log In",
        "group": "e53b421013fe6f78",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "Username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "Password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Username": "",
            "Password": ""
        },
        "payload": "",
        "submit": "Log In",
        "cancel": "Clear all",
        "topic": "account_infor",
        "topicType": "global",
        "splitLayout": "",
        "className": "",
        "x": 290,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "facd3568c75ffe94",
        "type": "mqtt in",
        "z": "e8e96c2a33d8f276",
        "name": "Receive sensor's data",
        "topic": "aqua/sensor",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9c39670e4e7d3237",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 180,
        "wires": [
            [
                "5d2d85bfcce24bf6"
            ]
        ]
    },
    {
        "id": "5d2d85bfcce24bf6",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "name": "Split msg",
        "func": "var payload = msg.payload;\n\nvar parts = payload.split(\",\");\nvar temperature = parseFloat(parts[0]); \nvar pH = parseFloat(parts[1]);\n\nmsg.temperature = temperature;\nmsg.pH = pH;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 180,
        "wires": [
            [
                "3e16b9223831d42b",
                "ca7040c5336401cd"
            ]
        ]
    },
    {
        "id": "a9865e62fb0eddc3",
        "type": "ui_gauge",
        "z": "e8e96c2a33d8f276",
        "name": "TempGauge",
        "group": "22c90016b0138946",
        "order": 1,
        "width": 8,
        "height": 6,
        "gtype": "gage",
        "title": "Temperature",
        "label": "Â°C",
        "format": "{{value}}",
        "min": "-55",
        "max": "125",
        "colors": [
            "#ffff00",
            "#00ff00",
            "#ca3838"
        ],
        "seg1": "25",
        "seg2": "35",
        "diff": false,
        "className": "",
        "x": 682,
        "y": 109.00000190734863,
        "wires": []
    },
    {
        "id": "b8ffa45a88e25d08",
        "type": "ui_chart",
        "z": "e8e96c2a33d8f276",
        "name": "pHChart",
        "group": "d1be80fd774cbf9c",
        "order": 2,
        "width": 8,
        "height": 6,
        "label": "pH",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "14",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 672,
        "y": 289.00000190734863,
        "wires": [
            []
        ]
    },
    {
        "id": "c8060b3c441eacbc",
        "type": "ui_chart",
        "z": "e8e96c2a33d8f276",
        "name": "TempChart",
        "group": "d1be80fd774cbf9c",
        "order": 1,
        "width": 8,
        "height": 6,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "125",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 682,
        "y": 169.00000190734863,
        "wires": [
            []
        ]
    },
    {
        "id": "b6e55afbe70b62fa",
        "type": "ui_gauge",
        "z": "e8e96c2a33d8f276",
        "name": "pHGauge",
        "group": "22c90016b0138946",
        "order": 2,
        "width": 8,
        "height": 6,
        "gtype": "gage",
        "title": "pH",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "14",
        "colors": [
            "#ffff00",
            "#00ff00",
            "#ca3838"
        ],
        "seg1": "6",
        "seg2": "8",
        "diff": false,
        "className": "",
        "x": 672,
        "y": 229.00000190734863,
        "wires": []
    },
    {
        "id": "6c7e06fb2c34eab6",
        "type": "debug",
        "z": "e8e96c2a33d8f276",
        "name": "debug 1",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 672,
        "y": 49.00000190734863,
        "wires": []
    },
    {
        "id": "97386011274523c6",
        "type": "debug",
        "z": "e8e96c2a33d8f276",
        "name": "debug 2",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 672,
        "y": 349.00000190734863,
        "wires": []
    },
    {
        "id": "3e16b9223831d42b",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "name": "Get tmp",
        "func": "\nmsg.payload = msg.temperature;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 492,
        "y": 109.00000190734863,
        "wires": [
            [
                "6c7e06fb2c34eab6",
                "a9865e62fb0eddc3",
                "c8060b3c441eacbc"
            ]
        ]
    },
    {
        "id": "ca7040c5336401cd",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "name": "Get pH",
        "func": "msg.payload = msg.pH;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 492,
        "y": 289.00000190734863,
        "wires": [
            [
                "b6e55afbe70b62fa",
                "b8ffa45a88e25d08",
                "97386011274523c6"
            ]
        ]
    },
    {
        "id": "aad4816e25b7a74d",
        "type": "ui_form",
        "z": "e8e96c2a33d8f276",
        "name": "",
        "label": "Set pH limits",
        "group": "65c1d4a51c575c31",
        "order": 4,
        "width": 8,
        "height": 1,
        "options": [
            {
                "label": "Lower limit",
                "value": "lowerLimit",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Upper limit",
                "value": "upperLimit",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "lowerLimit": "",
            "upperLimit": ""
        },
        "payload": "",
        "submit": "Confirm",
        "cancel": "Cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 90,
        "y": 540,
        "wires": [
            [
                "c4c17cce6edc6a47"
            ]
        ]
    },
    {
        "id": "c4c17cce6edc6a47",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "name": "Check input values",
        "func": "var payload = msg.payload;\n\nvar upper = parseFloat(payload.upperLimit);\nvar lower = parseFloat(payload.lowerLimit);\n\nvar up_lim = 14, lw_lim = 0;\n\nif (isNaN(upper) || isNaN(lower) || upper > up_lim || lower < lw_lim) {\n    msg.msg = \"Invalid limit values. Ensure upperLimit and lowerLimit are valid numbers.\";\n}\nelse if (lower > upper) {\n    msg.msg = \"Lower limit must not be greater than upper limit.\";\n}\nelse msg.msg = \"valid\";\n\nmsg.topic = \"aqua/sensor/pHLimit\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 540,
        "wires": [
            [
                "2e22f594189a6b58"
            ]
        ]
    },
    {
        "id": "2e22f594189a6b58",
        "type": "switch",
        "z": "e8e96c2a33d8f276",
        "name": "",
        "property": "msg",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "valid",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "valid",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 540,
        "wires": [
            [
                "019129d08e20dc1a",
                "fa21cd890a1881ca"
            ],
            [
                "d5b61288f9e00a0e"
            ]
        ]
    },
    {
        "id": "f64b2826bf60d035",
        "type": "mqtt out",
        "z": "e8e96c2a33d8f276",
        "name": "aqua/sensor/pHLimit",
        "topic": "aqua/sensor/pHLimit",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c39670e4e7d3237",
        "x": 1020,
        "y": 480,
        "wires": []
    },
    {
        "id": "019129d08e20dc1a",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "name": "Reformat msg payload publish",
        "func": "delete msg.msg;\n\nmsg.payload = `${msg.payload.upperLimit},${msg.payload.lowerLimit}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 480,
        "wires": [
            [
                "f64b2826bf60d035"
            ]
        ]
    },
    {
        "id": "4590f6c66bb63d2d",
        "type": "ui_form",
        "z": "e8e96c2a33d8f276",
        "name": "",
        "label": "Set temp limits",
        "group": "65c1d4a51c575c31",
        "order": 2,
        "width": 8,
        "height": 1,
        "options": [
            {
                "label": "Lower limit",
                "value": "lowerLimit",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Upper limit",
                "value": "upperLimit",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "lowerLimit": "",
            "upperLimit": ""
        },
        "payload": "",
        "submit": "Confirm",
        "cancel": "Cancel",
        "topic": "aqua/sensor/tmpLimit",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 100,
        "y": 680,
        "wires": [
            [
                "c08dd4deb1ab3b26"
            ]
        ]
    },
    {
        "id": "c08dd4deb1ab3b26",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "name": "Check input values",
        "func": "var payload = msg.payload;\n\nvar upper = parseFloat(payload.upperLimit);\nvar lower = parseFloat(payload.lowerLimit);\n\nvar up_lim = 125, lw_lim = -55;\n\n\nif (isNaN(upper) || isNaN(lower) || upper > up_lim || lower < lw_lim)\n{\n    msg.msg = \"Invalid limit values. Ensure upperLimit and lowerLimit are valid numbers.\";\n}\nelse if (lower > upper)\n{\n    msg.msg = \"Lower limit must not be greater than upper limit.\";\n}\nelse msg.msg = \"valid\";\nmsg.topic = \"aqua/sensor/tmpLimit\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 680,
        "wires": [
            [
                "802fab4f1761bdaa"
            ]
        ]
    },
    {
        "id": "802fab4f1761bdaa",
        "type": "switch",
        "z": "e8e96c2a33d8f276",
        "name": "",
        "property": "msg",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "valid",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "valid",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 680,
        "wires": [
            [
                "40dc35769b2ae3eb",
                "8a09650868d46d12"
            ],
            [
                "c85f88f43881c85a"
            ]
        ]
    },
    {
        "id": "40dc35769b2ae3eb",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "name": "Reformat msg payload publish",
        "func": "delete msg.msg;\n\nmsg.payload = `${msg.payload.upperLimit},${msg.payload.lowerLimit}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// default limits\nvar msg = { payload: \"25,32\" };\n\nreturn msg;",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 660,
        "wires": [
            [
                "431741a49418f828"
            ]
        ]
    },
    {
        "id": "431741a49418f828",
        "type": "mqtt out",
        "z": "e8e96c2a33d8f276",
        "name": "aqua/sensor/tmpLimit",
        "topic": "aqua/sensor/tmpLimit",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c39670e4e7d3237",
        "x": 1040,
        "y": 660,
        "wires": []
    },
    {
        "id": "829d068a470b9c62",
        "type": "ui_toast",
        "z": "e8e96c2a33d8f276",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "Setup error",
        "topic": "Invalid value input!",
        "name": "Invalid input noti",
        "x": 900,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "be083f11bf5de95f",
        "type": "ui_toast",
        "z": "e8e96c2a33d8f276",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "Setup error",
        "topic": "Invalid value input!",
        "name": "Invalid input noti",
        "x": 900,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "d5b61288f9e00a0e",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "name": "Get error msg",
        "func": "var payload = msg.msg;\ndelete msg.msg;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 540,
        "wires": [
            [
                "829d068a470b9c62"
            ]
        ]
    },
    {
        "id": "c85f88f43881c85a",
        "type": "function",
        "z": "e8e96c2a33d8f276",
        "name": "Get error msg",
        "func": "var payload = msg.msg;\ndelete msg.msg;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 720,
        "wires": [
            [
                "be083f11bf5de95f"
            ]
        ]
    },
    {
        "id": "8a09650868d46d12",
        "type": "ui_text",
        "z": "e8e96c2a33d8f276",
        "group": "65c1d4a51c575c31",
        "order": 1,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "Current tmp limits",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 690,
        "y": 600,
        "wires": []
    },
    {
        "id": "fa21cd890a1881ca",
        "type": "ui_text",
        "z": "e8e96c2a33d8f276",
        "group": "65c1d4a51c575c31",
        "order": 3,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "Current pH limits",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 690,
        "y": 420,
        "wires": []
    },
    {
        "id": "4de01cb4f1ad5757",
        "type": "inject",
        "z": "e8e96c2a33d8f276",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"upperLimit\":32,\"lowerLimit\":25}",
        "payloadType": "json",
        "x": 470,
        "y": 620,
        "wires": [
            [
                "40dc35769b2ae3eb",
                "8a09650868d46d12"
            ]
        ]
    },
    {
        "id": "e508543d9042df7a",
        "type": "inject",
        "z": "e8e96c2a33d8f276",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"upperLimit\":8,\"lowerLimit\":7.5}",
        "payloadType": "json",
        "x": 470,
        "y": 420,
        "wires": [
            [
                "019129d08e20dc1a",
                "fa21cd890a1881ca"
            ]
        ]
    },
    {
        "id": "7fef327f671fe9ca",
        "type": "ui_switch",
        "z": "34836421c703f805",
        "d": true,
        "name": "",
        "label": "Auto",
        "tooltip": "Automatically feeding base on schedule",
        "group": "590e614324272a29",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 170,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a0ef59ccbdd4dda2",
        "type": "ui_button",
        "z": "34836421c703f805",
        "name": "",
        "group": "590e614324272a29",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete time",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 350,
        "y": 580,
        "wires": [
            [
                "5bfc62e1e63afe88"
            ]
        ]
    },
    {
        "id": "ab468da7239a1992",
        "type": "ui_text_input",
        "z": "34836421c703f805",
        "name": "",
        "label": "Add new time",
        "tooltip": "",
        "group": "590e614324272a29",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "time",
        "delay": "0",
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "42d48329161bb8af"
            ]
        ]
    },
    {
        "id": "2c569491f6305c24",
        "type": "function",
        "z": "34836421c703f805",
        "name": "Process Add",
        "func": "// Láº¥y dá»¯ liá»u tá»« msg.payload\nlet newTime = msg.payload; // Thá»i gian dáº¡ng hh:mm\n\n// Láº¥y báº£ng tá»« context flow\nlet data = flow.get(\"table\").payload || [];\n\n// Kiá»m tra xem thá»i gian ÄÃ£ tá»n táº¡i trong báº£ng chÆ°a\nlet exists = data.some(item => typeof item.time === 'string' && item.time === newTime);\n\n// Náº¿u thá»i gian chÆ°a tá»n táº¡i, thÃªm vÃ o báº£ng\nif (!exists) {\n    data.push({\n        time: newTime,\n        done: false,\n        id: 0\n    });\n    msg.payload = \"Add success!\";\n} else {\n    msg.payload = \"Add fail! Time exists!\";\n}\n\nlet updated_table = {\"payload\": data}\n// LÆ°u báº£ng vÃ o context flow\nflow.set(\"table\", updated_table);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 440,
        "wires": [
            [
                "c165d504301ac2b6",
                "38366ffa9378e331"
            ]
        ]
    },
    {
        "id": "5bfc62e1e63afe88",
        "type": "function",
        "z": "34836421c703f805",
        "name": "Process Remove",
        "func": "let indexToRemove = msg.index;\nmsg.payload = msg.payload.filter(item => item.index !== indexToRemove);\nmsg.payload = msg.payload.map(item => `${item.index},${item.time},${item.done_today}`).join('\\n');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 580,
        "wires": [
            [
                "b7cde39c4119f82c"
            ]
        ]
    },
    {
        "id": "c165d504301ac2b6",
        "type": "debug",
        "z": "34836421c703f805",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 880,
        "y": 500,
        "wires": []
    },
    {
        "id": "b7cde39c4119f82c",
        "type": "debug",
        "z": "34836421c703f805",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 840,
        "y": 580,
        "wires": []
    },
    {
        "id": "ea6d874806af1436",
        "type": "ui_text_input",
        "z": "34836421c703f805",
        "name": "",
        "label": "Id of time want to delete",
        "tooltip": "",
        "group": "590e614324272a29",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "a0ef59ccbdd4dda2"
            ]
        ]
    },
    {
        "id": "312b7a7404c7db20",
        "type": "debug",
        "z": "34836421c703f805",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 680,
        "y": 500,
        "wires": []
    },
    {
        "id": "638d3418cf1ba387",
        "type": "function",
        "z": "34836421c703f805",
        "name": "sort",
        "func": "// Äá»c dá»¯ liá»u JSON tá»« payload\nlet data = flow.get(\"table\").payload;\nnode.log(Array.isArray(data));\n\n// Sáº¯p xáº¿p dá»¯ liá»u theo thá»i gian (theo Äá»nh dáº¡ng hh:mm)\ndata.sort((a, b) => {\n    let timeA = a.time.split(':').map(Number);\n    let timeB = b.time.split(':').map(Number);\n    return timeA[0] * 60 + timeA[1] - (timeB[0] * 60 + timeB[1]);\n});\n\n// ThÃªm ID cho má»i dÃ²ng dá»¯ liá»u\ndata = data.map((item, index) => ({ ...item, id: index + 1 }));\n\nnode.log(Array.isArray(data));\nlet table = {\"payload\": data}\nflow.set(\"table\", table);\n\nreturn table;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            [
                "2e11cef063589a1a",
                "1c2c335d55ebc684"
            ]
        ]
    },
    {
        "id": "8b79b0241a096405",
        "type": "json",
        "z": "34836421c703f805",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 470,
        "y": 280,
        "wires": [
            [
                "8e2874808b8e7a0f",
                "e3b91fd5d047ece0"
            ]
        ]
    },
    {
        "id": "eff5673ee7e21d15",
        "type": "file in",
        "z": "34836421c703f805",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 280,
        "wires": [
            [
                "8b79b0241a096405"
            ]
        ]
    },
    {
        "id": "f45b3c8861cad6ed",
        "type": "inject",
        "z": "34836421c703f805",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": ".node-red\\projects\\AquaSmart\\scheduling.json",
        "payloadType": "str",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "eff5673ee7e21d15"
            ]
        ]
    },
    {
        "id": "2e11cef063589a1a",
        "type": "ui_table",
        "z": "34836421c703f805",
        "group": "590e614324272a29",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 6,
        "columns": [
            {
                "field": "id",
                "title": "Index",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time",
                "title": "Time",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "done",
                "title": "Done today",
                "width": "",
                "align": "left",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1070,
        "y": 280,
        "wires": []
    },
    {
        "id": "42d48329161bb8af",
        "type": "function",
        "z": "34836421c703f805",
        "name": "Format from timestampt to time (HH:MM) string",
        "func": "// Giáº£ sá»­ timestamp lÃ  sá» milliseconds tá»« 00:00:00 trong má»t ngÃ y cá»¥ thá»\nlet timestamp = parseInt(msg.payload, 10); // Äáº£m báº£o timestamp lÃ  sá» nguyÃªn\n\n// TÃ­nh toÃ¡n giá» vÃ  phÃºt\nlet hours = Math.floor(timestamp / (1000 * 60 * 60));\nlet minutes = Math.floor((timestamp % (1000 * 60 * 60)) / (1000 * 60));\n\n// Äá»nh dáº¡ng thÃ nh chuá»i hh:mm\nlet formattedTime = (hours < 10 ? '0' : '') + hours + ':' + (minutes < 10 ? '0' : '') + minutes;\n\nmsg.payload = formattedTime; // GÃ¡n chuá»i thá»i gian ÄÃ£ Äá»nh dáº¡ng vÃ o msg.payload\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 440,
        "wires": [
            [
                "312b7a7404c7db20",
                "2c569491f6305c24"
            ]
        ]
    },
    {
        "id": "8e2874808b8e7a0f",
        "type": "debug",
        "z": "34836421c703f805",
        "name": "debug 10",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 460,
        "y": 200,
        "wires": []
    },
    {
        "id": "e3b91fd5d047ece0",
        "type": "function",
        "z": "34836421c703f805",
        "name": "function 1",
        "func": "flow.set(\"table\", msg)\n// node.log(Array.isArray(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 280,
        "wires": [
            [
                "638d3418cf1ba387"
            ]
        ]
    },
    {
        "id": "38366ffa9378e331",
        "type": "switch",
        "z": "34836421c703f805",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Add success!",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Add fail! Time exists!",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 440,
        "wires": [
            [
                "638d3418cf1ba387",
                "7322ca28f2f4b0e0"
            ],
            [
                "15a2c3d5868b7e4b"
            ]
        ]
    },
    {
        "id": "15a2c3d5868b7e4b",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "Setup error",
        "topic": "Invalid value input!",
        "name": "Invalid input noti",
        "x": 1080,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "1c2c335d55ebc684",
        "type": "debug",
        "z": "34836421c703f805",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 820,
        "y": 200,
        "wires": []
    },
    {
        "id": "7322ca28f2f4b0e0",
        "type": "ui_toast",
        "z": "34836421c703f805",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "Add time",
        "topic": "Table update success!",
        "name": "Table update success!",
        "x": 1100,
        "y": 420,
        "wires": []
    },
    {
        "id": "2e6a6379.742abc",
        "type": "ui_table",
        "z": "2c95d874b6e3eb36",
        "group": "ff9fdb9a.7da098",
        "name": "testTable",
        "order": 6,
        "width": "8",
        "height": 5,
        "columns": [
            {
                "field": "rowNumber",
                "title": "Row Number 1",
                "width": "",
                "align": "left",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "textValue",
                "title": "Text",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "numberValue",
                "title": "Number",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 780,
        "y": 140,
        "wires": [
            [
                "1c377ea0.5801e1"
            ]
        ]
    },
    {
        "id": "16664cef.5b26b3",
        "type": "function",
        "z": "2c95d874b6e3eb36",
        "name": "table paramter",
        "func": "msg.ui_control = {tabulator:{}};\n\n//workaround that buttons can`t deliver empty strings\nif (msg.payload.hasOwnProperty('payload')) {\n    msg.payload=msg.payload.payload;\n}\n\nmsg.ui_control.tabulator[msg.topic]=msg.payload;\ndelete msg.topic;\nmsg.payload=null;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 562,
        "y": 429,
        "wires": [
            [
                "2e6a6379.742abc",
                "b8d75d24.6cbed"
            ]
        ]
    },
    {
        "id": "b8d75d24.6cbed",
        "type": "debug",
        "z": "2c95d874b6e3eb36",
        "name": "table input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 429,
        "wires": []
    },
    {
        "id": "1c377ea0.5801e1",
        "type": "debug",
        "z": "2c95d874b6e3eb36",
        "name": "table output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 943,
        "y": 140,
        "wires": []
    },
    {
        "id": "b15c31a9.af37c",
        "type": "ui_switch",
        "z": "2c95d874b6e3eb36",
        "name": "selectable",
        "label": "selectable",
        "tooltip": "",
        "group": "ff9fdb9a.7da098",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "selectable",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 202,
        "y": 225,
        "wires": [
            [
                "16664cef.5b26b3"
            ]
        ]
    },
    {
        "id": "75207e8d.c54d4",
        "type": "ui_switch",
        "z": "2c95d874b6e3eb36",
        "name": "movableColumns",
        "label": "movableColumns",
        "tooltip": "",
        "group": "ff9fdb9a.7da098",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "movableColumns",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 232,
        "y": 276,
        "wires": [
            [
                "16664cef.5b26b3"
            ]
        ]
    },
    {
        "id": "f178c6fe.710ef8",
        "type": "ui_button",
        "z": "2c95d874b6e3eb36",
        "name": "",
        "group": "ff9fdb9a.7da098",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Fill demo data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[{\"textValue\":\"Line #1\",\"numberValue\":123.12},{\"textValue\":\"Line #2\",\"numberValue\":100},{\"textValue\":\"Line #3\",\"numberValue\":50}]",
        "payloadType": "json",
        "topic": "rowFormatter",
        "topicType": "str",
        "x": 222,
        "y": 140,
        "wires": [
            [
                "2e6a6379.742abc"
            ]
        ]
    },
    {
        "id": "7b6490b3.cd9c7",
        "type": "function",
        "z": "2c95d874b6e3eb36",
        "name": "callback function(s)",
        "func": "// how to use the editor to write callback functions\n// DO NOT wire this into your flow!\n// copy / paste \"function( ... }\" into the correct calback parameter\n// use the \"debugger\" statement to debug your callback inside your browser\n\nvar topCalc = function(values, data, calcParams){\n    var total = 0;\n    var calc = 0;\n    var count = 0;\n    data.forEach(value => {\n        total+=Number(value.numberValue);\n        count++;\n    });\n    if (count>0) calc=(total/count).toFixed(2);\n    return `${calc} (avg)`;\n}\n\nvar legend = function (value) {\n    if (value<100) return \"<span style='color:#FF0000;'>\"+value+\"</span>\";\n    else return \"<span style='color:#000000;'>\"+value+\"</span>\"; \n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 572,
        "y": 548,
        "wires": [
            []
        ]
    },
    {
        "id": "25247f4b.cc7ec",
        "type": "inject",
        "z": "2c95d874b6e3eb36",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 56,
        "y": 276,
        "wires": [
            [
                "75207e8d.c54d4",
                "bd3fd382.a2aa9"
            ]
        ]
    },
    {
        "id": "bd3fd382.a2aa9",
        "type": "ui_switch",
        "z": "2c95d874b6e3eb36",
        "name": "headerVisible",
        "label": "headerVisible",
        "tooltip": "",
        "group": "ff9fdb9a.7da098",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "headerVisible",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 222,
        "y": 327,
        "wires": [
            [
                "16664cef.5b26b3"
            ]
        ]
    }
]